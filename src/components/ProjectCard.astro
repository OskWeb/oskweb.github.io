---
import { skillColorAssociate } from "../utils/skillsColors";

interface Language {
    language: string;
}

interface ProjectCardProps {
    title: string;
    description: string;
    link: string;
    languages: Language[]
}

const { title, description, link, languages = [] } = Astro.props as ProjectCardProps;

---

<div class="project_card">
    <a href={link} class="project-wrap-link" target="_blank">
        <div class="project-info">
            <span class="project-title">{title}</span>
            <p>
                {description}
            </p>
            <div class="languages">
                {
                    languages.length > 0 && (
                        languages.map(({ language }) => (
                            <div class={skillColorAssociate(language) +  ` language`} >
                                <span>{language}</span>
                            </div>
                        ))
                    )
                }
            </div>
        </div>       
    </a>      
</div>

<style>
    .project_card {
        width: 100%;
        height: auto;
        display: flex;
        border-radius: 5px;
        border: 2px solid #848484;
        position: relative;
        overflow: hidden;
        transition: all 500ms ease;
    }
    .project_card .project_card_content_box {
        position: relative;
    }
    .project_card .project-wrap-link {
        width: 100%;
        text-decoration: none;
    }
    .project_card .project-wrap-link .project-info .project-title {
        color: white;
    }
    .project_card .project-wrap-link .project-info p {
        color: var(--gray-color-1);
    }
    .project_card .backgroundImage {
        display: none;
    }
    .project-title {
        font-size: 14px;
    }
    .project_card .project-wrap-link .project-info {
        position: relative;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        width: 100%;
        font-size: 13px;
        padding: 20px;
        gap: 10px;
        background-color: #1E1E1E;
    }
    .languages {
        display: flex;
        gap: 20px;
        flex-wrap: wrap;
    }
    .languages .language {
        display: flex;
        gap: 5px;
        align-items: center;
        font-size: 11px;
        color: black;
        padding: 5px;
        border-radius: 3px;
    }

    @media (hover: hover) {
        .project_card .project-wrap-link:hover::before {
            position: absolute;
            content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 576 512'%3E%3Cpath fill='%23FFFFFF' d='M288 32c-80.8 0-145.5 36.8-192.6 80.6C48.6 156 17.3 208 2.5 243.7c-3.3 7.9-3.3 16.7 0 24.6C17.3 304 48.6 356 95.4 399.4C142.5 443.2 207.2 480 288 480s145.5-36.8 192.6-80.6c46.8-43.5 78.1-95.4 93-131.1c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C433.5 68.8 368.8 32 288 32zM144 256a144 144 0 1 1 288 0 144 144 0 1 1 -288 0zm144-64c0 35.3-28.7 64-64 64c-7.1 0-13.9-1.2-20.3-3.3c-5.5-1.8-11.9 1.6-11.7 7.4c.3 6.9 1.3 13.8 3.2 20.7c13.7 51.2 66.4 81.6 117.6 67.9s81.6-66.4 67.9-117.6c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3z'/%3E%3C/svg%3E");
            width: 30px;
            height: 30px;
            border-radius: 5px;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: black;
            padding: 10px;
            fill: white;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1;
        }
        .project_card:hover .project-wrap-link .project-info {
            filter: blur(3px);
        }
    }
    
</style>